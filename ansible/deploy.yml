
- hosts: all
  become: yes
  become_user: root

  vars:
    certbot_dns_credentials: ../etc/certbot-dns-user-credentials.yml
    docker_config_json: ../etc/docker-conf/config.json
    docker_compose_file: ../docker-compose-prod.yml
    master_key_file: ../rails/config/master.key
    credentials_file: ../rails/config/credentials.yml.enc

    certbot_dir_config: "{{ docker_dir }}/letsencrypt"
    certbot_dir_work: "{{ home_dir }}/.certbot/work"
    certbot_dir_logs: "{{ home_dir }}/.certbot/logs"
    certbot_dir_live: "{{ certbot_dir_config }}/live/{{ primary_host }}"
    certbot_notification_email: simon.baird@gmail.com

    thost_log_dir: "{{ docker_dir }}/log"
    nginx_conf_dir: "{{ docker_dir }}/nginx-conf"
    rails_conf_dir: "{{ docker_dir }}/config"
    secrets_dir: "{{ docker_dir }}/secrets"

    service_name: thost
    db_name: app_production
    db_user: postgres

  tasks:

  - name: Add repo for docker-ce
    command:
      cmd: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo warn=no
      creates: /etc/yum.repos.d/docker-ce.repo
    tags:
    - deps

  - name: Install docker and a few other packages we need
    dnf:
      state: present
      name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - certbot
      - chkconfig
      - make
      - cronie
      - nmap-ncat
      - python3-pip
    tags:
    - deps

    # So we don't run out of space on the root partition we'll
    # use /home/docker instead of the default /var/lib/docker
    # (Todo: Better storage management)
    #
  - name: Ensure /home/docker exists
    file:
      path: /home/docker
      state: directory
      owner: root
      group: root
      mode: '0755'
    tags:
    - deps

  - name: Set selinux context for /home/docker
    community.general.sefcontext:
      target: '/home/docker(.*)?'
      setype: container_var_lib_t
      state: present
    register: docker_context
    tags:
    - deps

  - name: Apply the new selinux context created above
    command: |-
      restorecon -r /home/docker
    when: docker_context.changed
    tags:
    - deps

  - name: Change docker default from /var/lib/docker to /home/docker
    lineinfile:
      path: /lib/systemd/system/docker.service
      regexp: '^ExecStart'
      # Default line looks like this:
      #   ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
      # We're intending to insert the '--data-root /home/docker' option
      line: "ExecStart=/usr/bin/dockerd --data-root /home/docker -H fd:// --containerd=/run/containerd/containerd.sock"
    register: docker_config
    tags:
    - deps

    # Need to reload when the docker.service file changes
  - name: Run systemctl daemon-reload if required
    command:
      cmd: systemctl daemon-reload
    when: docker_config.changed
    tags:
    - deps

  - name: Start docker service
    systemd:
      name: docker
      state: started
      enabled: yes
    tags:
    - deps

    # For the case when it was already running but needs a restart now
  - name: Restart docker service if required
    systemd:
      name: docker
      state: restarted
    when: docker_config.changed or docker_context.changed
    tags:
    - deps

  - name: Start crond
    systemd:
      name: crond
      state: started
      enabled: yes
    tags:
    - deps

  - name: Pip install docker-compose and certbot-dns-route53
    pip:
      name:
      - docker-compose
      - certbot-dns-route53
    tags:
    - deps

  - name: Make .docker dir for root user
    file:
      path: "{{ root_home_dir }}/.docker"
      state: directory
    tags:
    - deps

  - name: Copy config.json file for docker pull credentials
    copy:
      src: "{{ docker_config_json }}"
      dest: "{{ root_home_dir }}/.docker/config.json"
      mode: "0600"
    tags:
    - deps

  - name: Create bin dir
    become: no
    file:
      path: "{{ bin_dir }}"
      state: directory
    tags:
    - scripts

  - name: Copy up a Makefile and some scripts
    become: no
    template:
      src: templates/{{ item }}.j2
      dest: "{{ home_dir }}/{{ item }}"
      mode: "0755"
    with_items:
    - Makefile
    - bin/certbot-create
    - bin/certbot-renew
    - bin/certbot-revoke
    - bin/db-backup
    - bin/fetch-prerelease-empty
    tags:
    - scripts

    # (These are in a different place because they're also useful locally)
  - name: Copy cache info scripts
    become: no
    copy:
      src: "../bin/{{ item }}"
      dest: "{{ bin_dir }}/{{ item }}"
      mode: "0755"
    with_items:
    - cache-info
    - cache-list-items
    tags:
    - scripts

  - name: Create a cron job for regular db backups
    cron:
      name: thost db backup
      user: root
      job: "{{ bin_dir }}/db-backup"
      minute: "5"
      hour: "*/8"
    tags:
    - scripts

  - name: Create a cron job for regular prerelease empty fetches
    cron:
      name: fetch prerelease empty
      user: "{{ ansible_user }}"
      job: "{{ bin_dir }}/fetch-prerelease-empty"
      minute: "4"
      hour: "*/8"
    tags:
    - scripts

    # The genenerate thumbnail job produces many defunct chrome
    # processes. Restart once in a while to clean them up.
  - name: Create a cron job to restart the jobs container
    cron:
      name: jobs container restart
      user: root
      job: "/usr/local/bin/docker-compose -f {{ home_dir }}/docker-compose.yml restart jobs"
      minute: "10"
      hour: "*/8"
    tags:
    - scripts

  - name: Create dir for certbot aws credentials
    become: no
    file:
      path: "{{ home_dir }}/.aws"
      state: directory
    tags:
    - certs

  - name: Install AWS credentials for certbot
    become: no
    copy:
      src: "{{ certbot_dns_credentials }}"
      dest: "{{ home_dir }}/.aws/credentials"
      mode: "0600"
    tags:
    - certs

  - name: Create a cert if it doesn't exist
    become: no
    command:
      cmd: "{{ bin_dir }}/certbot-create"
      creates: "{{ certbot_dir_live }}/fullchain.pem"
    tags:
    - certs

  - name: Renew certs maybe
    become: no
    command:
      cmd: "{{ bin_dir }}/certbot-renew"
    register: certbot_renew
    tags:
    - certs

  - name: Show renew output
    debug:
      var: certbot_renew.stdout_lines
    tags:
    - certs

  - name: Copy docker-compose file
    become: no
    copy:
      src: "{{ docker_compose_file }}"
      dest: "{{ home_dir }}/docker-compose.yml"
    tags:
    - app

  - name: Pull latest images
    # So docker-compose doesn't try to build
    command:
      cmd: docker-compose pull -q
    tags:
    - app
    - fast-upgrade

  - name: Create dir for logs
    become: no
    file:
      path: "{{ thost_log_dir }}"
      state: directory
    tags:
    - app

  - name: Create nginx conf dir
    become: no
    file:
      path: "{{ nginx_conf_dir }}"
      state: directory
    tags:
    - app

  - name: Copy nginx config
    become: no
    template:
      src: templates/docker/nginx-conf/{{ item }}.j2
      dest: "{{ nginx_conf_dir }}/{{ item }}"
      mode: "0600"
    with_items:
    - app.conf
    - commonconf
    tags:
    - app

  - name: Create rails local settings dir
    become: no
    file:
      path: "{{ rails_conf_dir }}"
      state: directory
    tags:
    - app

  - name: Copy rails local settings
    become: no
    template:
      src: templates/docker/config/{{ item }}.j2
      dest: "{{ rails_conf_dir }}/{{ item }}"
      mode: "0600"
    with_items:
    - settings_local.yml
    tags:
    - app

  - name: Create dir for secrets
    become: no
    file:
      path: "{{ secrets_dir }}"
      state: directory
    tags:
    - app

  - name: Copy master key file
    become: no
    copy:
      src: "{{ master_key_file }}"
      dest: "{{ secrets_dir }}/master.key"
      mode: "0400"
    tags:
    - app

  - name: Copy encrypted credentials file
    become: no
    copy:
      src: "{{ credentials_file }}"
      dest: "{{ secrets_dir }}/credentials.yml.enc"
      mode: "0400"
    tags:
    - app

  - name: Copy init script
    template:
      src: templates/etc/init.d/{{ service_name }}.j2
      dest: /etc/init.d/{{ service_name }}
      mode: "0755"
    register: init_script
    tags:
    - app

  - name: Run systemctl daemon-reload if required
    command:
      cmd: systemctl daemon-reload
    when: init_script.changed
    tags:
    - app

  - name: Fetch latest prerelease
    command:
      cmd: "{{ bin_dir }}/fetch-prerelease-empty"
    become: no
    tags:
    - app
    - fast-upgrade
    - refresh-prerelease

  # This is slower because it shuts down all four containers and
  # brings them back up again
  - name: Start/restart service
    systemd:
      name: "{{ service_name }}"
      state: restarted
    when: not fast_restart
    tags:
    - app
    - fast-upgrade

  # This is faster because it restarts the rails container only
  - name: Restart/upgrade rails container
    systemd:
      name: "{{ service_name }}"
      state: reloaded
    when: fast_restart
    tags:
    - app
    - fast-upgrade

    # Only for bootstrapping a new server
  - name: Create db
    command:
      cmd: docker-compose exec app bash -c "bin/rails db:create"
    tags:
    - db-create

  - name: Apply database migrations
    command:
      cmd: docker-compose exec app bash -c "bin/rails db:migrate"
    register: db_migrate
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Show database migration output
    debug:
      var: db_migrate.stdout_lines
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Clean up unused docker images
    command:
      cmd: docker image prune -f
    tags:
    - cleanup

  - name: Clean up stale containers
    command:
      cmd: docker-compose rm
    tags:
    - cleanup
